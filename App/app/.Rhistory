runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(tidyverse)
#library(caret)
#library(mlbench)
library(e1071)
#library(h2o)
#library(labelled)
#library(randomForest)
#library(doSNOW)
#library(rminer)
#library(dbplyr)
#library(pool)
#library(DBI)
#library(RMySQL)
library(iterpc)
dat <-
haven::read_sav(
"/Users/tessalottermann/Documents/Thesis/cp20l_EN_1.0p.sav"
) %>%
select(cp20l020:cp20l069) %>%
rename(
E1 = "cp20l020",
A1 = "cp20l021",
C1 = "cp20l022",
N1 = "cp20l023",
O1 = "cp20l024",
E2 = "cp20l025",
A2 = "cp20l026",
C2 = "cp20l027",
N2 = "cp20l028",
O2 = "cp20l029",
E3 = "cp20l030",
A3 = "cp20l031",
C3 = "cp20l032",
N3 = "cp20l033",
O3 = "cp20l034",
E4 = "cp20l035",
A4 = "cp20l036",
C4 = "cp20l037",
N4 = "cp20l038",
O4 = "cp20l039",
E5 = "cp20l040",
A5 = "cp20l041",
C5 = "cp20l042",
N5 = "cp20l043",
O5 = "cp20l044",
E6 = "cp20l045",
A6 = "cp20l046",
C6 = "cp20l047",
N6 = "cp20l048",
O6 = "cp20l049",
E7 = "cp20l050",
A7 = "cp20l051",
C7 = "cp20l052",
N7 = "cp20l053",
O7 = "cp20l054",
E8 = "cp20l055",
A8 = "cp20l056",
C8 = "cp20l057",
N8 = "cp20l058",
O8 = "cp20l059",
E9 = "cp20l060",
A9 = "cp20l061",
C9 = "cp20l062",
N9 = "cp20l063",
O9 = "cp20l064",
E10 = "cp20l065",
A10 = "cp20l066",
C10 = "cp20l067",
N10 = "cp20l068",
O10 = "cp20l069"
) #%>% # Items den Skalen zuordnen
# mutate_all(scale) %>%  # mittelwert auf 0, sd auf 1
drop_na() # zeilen mit fehlenden werten entfernen
# mutate_all(scale) %>%  # mittelwert auf 0, sd auf 1
%>% drop_na() # zeilen mit fehlenden werten entfernen
# mutate_all(scale) %>%  # mittelwert auf 0, sd auf 1
dat  %>% drop_na() # zeilen mit fehlenden werten entfernen
generate_model <-
function(specific_target,
target_overweight,
target_incl,
item_per_scale) {
target_facet <- substring(specific_target, 1, 1)
if (target_overweight * item_per_scale > 9 &&
target_incl == TRUE) {
stop(
"Es dürfen maximal 9 Items aus der Target-Skala verwendet werden! (Overweight oder Item_per_Scale zu hoch)"
)
}
if (item_per_scale >= 10) {
stop("Maximal 9 Items als Prädiktoren!")
}
all_f <- c("O", "C", "E", "A", "N")
if (!target_incl) {
notall_f <- all_f[all_f != target_facet]
predictors <- str_sort(rep(notall_f, times = item_per_scale))
} else {
all_f
predictors_plain <-
rep(all_f, times = item_per_scale) # Predictors ohne Overweight
overweight <-
c(rep(target_facet, times = ((target_overweight * item_per_scale) - item_per_scale
))) # Array mit dem Overweight als Faktor
predictors <-
str_sort(c(predictors_plain, overweight)) # Finales Array inkl Overweight
}
final_predictors <- c()
for (i in predictors) {
rand <- sample(1:10, 1)
new_val <- paste(i, rand, sep = "")
while (new_val %in% final_predictors) {
rand <- sample(1:10, 1)
new_val <- paste(i, rand, sep = "")
}
# if (new_val %in% final_predictors) {
#
# }
while (new_val == specific_target) {
rand <- sample(1:10, 1)
new_val <- paste(i, rand, sep = "")
}
# if (new_val == specific_target) {
#
# }
final_predictors <- append(final_predictors, new_val)
}
form <-
paste0(specific_target,
" ~ ",
paste0(final_predictors, collapse = " + "))
return(form)
}
generate_perms <- function(st, to, ti, ips) {
perms <- list()
while (length(perms) < 5) {
g <- generate_model(st, to, ti, ips)
if (!(g %in% perms)) {
perms <- append(perms, g)
}
}
return(perms)
}
get_model_results <- function(mdl) {
# mdl <- "E2 ~ E1 + A1 + N1 + O1 + C1"
tictoc::tic()
target <- str_split(mdl, "~")[[1]][1] %>% str_trim()
model_svm <-
e1071::svm(as.formula(mdl), data = training, cross = 5)
summary(model_svm)
mdlsave <- gsub(" ", "", mdl)
#write.svm(model_svm, svm.file = paste("/Users/tessa/Documents/Uni/Master/Thesis/Experience-AI-in-Lab/R/SVM_Models/Rdata",mdlsave,".svm"),
#          scale.file = paste("/Users/tessa/Documents/Uni/Master/Thesis/Experience-AI-in-Lab/R/SVM_Models/Rdata",mdlsave,".scale"), yscale.file = paste("/Users/tessa/Documents/Uni/Master/Thesis/Experience-AI-in-Lab/R/SVM_Models/Rdata",mdlsave,".yscale"))
saveRDS(
model_svm,
file = paste(
"/Users/tessalottermann/Documents/Thesis/RDSModels/svmmodel_",
mdlsave,
".rds",
sep = ""
)
)
res_df_trained <- data.frame(truth_trained = validation[[target]],
pred_trained = round(predict(model_svm, validation))) %>%
mutate(diff_trained = truth_trained - pred_trained)
res_df_untrained <- data.frame(truth_untrained = dat[[target]],
pred_untrained = round(predict(model_svm, dat))) %>%
mutate(diff_untrained = truth_untrained - pred_untrained)
tictoc::toc()
results <- list(
mse = mean(model_svm$MSE),
hit_0_trained = sum(res_df_trained$diff_trained == 0) / nrow(validation),
hit_1_trained = sum(abs(res_df_trained$diff_trained) <= 1) / nrow(validation),
hit_0_untrained = sum(res_df_untrained$diff_untrained == 0) / nrow(dat),
hit_1_untrained = sum(abs(res_df_untrained$diff_untrained) <= 1) / nrow(dat)
)
#print(results)
# setdf <- add_row(setdf, mse = results$mse, hit_0_trained = results$hit_0_trained, hit_1_trained = results$hit_1_trained, hit_0_untrained = results$hit_0_untrained, hit_1_untrained = results$hit_1_untrained, Predictions = i)
return(results)
}
setdf <-
data.frame(
mse = double(),
hit_0_trained = double(),
hit_1_trained = double(),
hit_0_untrained = double(),
hit_1_untrained = double(),
Predictions = character()
)
get_model_results("C3 ~ A2 + C6 + C2 + C1 + E9 + N3 + O1")
# Generierung von Trainings- und Validierungsdatensatz ------------------------------
df <- dat
df$id <- 1:nrow(df)
training <- df %>% dplyr::sample_frac(.75)
validation  <- dplyr::anti_join(df, training, by = 'id')
get_model_results("C3 ~ A2 + C6 + C2 + C1 + E9 + N3 + O1")
View(dat)
get_model_results("C3 ~ A2 + C6 + C2 + C1 + E9 + N3 + O1")
get_model_results <- function(mdl) {
# mdl <- "E2 ~ E1 + A1 + N1 + O1 + C1"
tictoc::tic()
target <- str_split(mdl, "~")[[1]][1] %>% str_trim()
model_svm <-
e1071::svm(as.formula(mdl), data = training, cross = 5)
summary(model_svm)
mdlsave <- gsub(" ", "", mdl)
#write.svm(model_svm, svm.file = paste("/Users/tessa/Documents/Uni/Master/Thesis/Experience-AI-in-Lab/R/SVM_Models/Rdata",mdlsave,".svm"),
#          scale.file = paste("/Users/tessa/Documents/Uni/Master/Thesis/Experience-AI-in-Lab/R/SVM_Models/Rdata",mdlsave,".scale"), yscale.file = paste("/Users/tessa/Documents/Uni/Master/Thesis/Experience-AI-in-Lab/R/SVM_Models/Rdata",mdlsave,".yscale"))
saveRDS(
model_svm,
file = paste(
"/Users/tessalottermann/Documents/Thesis/RDSModels/svmmodel_",
mdlsave,
".rds",
sep = ""
)
)
res_df_trained <- data.frame(truth_trained = validation[[target]],
pred_trained = round(predict(model_svm, validation))) %>%
mutate(diff_trained = truth_trained - pred_trained)
res_df_untrained <- data.frame(truth_untrained = dat[[target]],
pred_untrained = round(predict(model_svm, dat))) %>%
mutate(diff_untrained = truth_untrained - pred_untrained)
tictoc::toc()
results <- list(
mse = mean(model_svm$MSE),
hit_0_trained = sum(res_df_trained$diff_trained == 0) / nrow(validation),
hit_1_trained = sum(abs(res_df_trained$diff_trained) <= 1) / nrow(validation),
#hit_0_untrained = sum(res_df_untrained$diff_untrained == 0) / nrow(dat),
#hit_1_untrained = sum(abs(res_df_untrained$diff_untrained) <= 1) / nrow(dat)
)
#print(results)
# setdf <- add_row(setdf, mse = results$mse, hit_0_trained = results$hit_0_trained, hit_1_trained = results$hit_1_trained, hit_0_untrained = results$hit_0_untrained, hit_1_untrained = results$hit_1_untrained, Predictions = i)
return(results)
}
get_model_results("C3 ~ A2 + C6 + C2 + C1 + E9 + N3 + O1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(tidyverse)
library(e1071)
dat <-
read_csv(" /Users/tessalottermann/Documents/Thesis/Answers.csv")
library(dplyr)
library(tidyverse)
library(e1071)
dat <-
read_csv("/Users/tessalottermann/Documents/Thesis/Answers.csv")
library(dplyr)
library(tidyverse)
library(e1071)
dat_auswertung <-
read_csv("/Users/tessalottermann/Documents/Thesis/Answers.csv")
View(dat_auswertung)
colnames(dat_auswertung)
dat_auswertung[!dat_auswertung$GQS_5_1==NULL]
dat_auswertung[!dat_auswertung$GQS_5_1=="NULL"]
dat_auswertung[!is.na(dat_auswertung$GQS_5_1)]
dat_auswertung[!(is.na(dat_auswertung$GQS_5_1))]
dat_auswertung <- dat_auswertung[!(is.na(dat_auswertung$GQS_5_1))]
View(dat_auswertung)
dat_auswertung <-
read_csv("/Users/tessalottermann/Documents/Thesis/Answers2.csv")
spec()
spec(dat_auswertung)
dat_auswertung %>% mutate(Vertrauen = mean(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5))
dat_auswertung <-
read_csv("/Users/tessalottermann/Documents/Thesis/Answers2.csv", na ="NULL")
dat_auswertung %>% mutate(Vertrauen = mean(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5))
spec(dat_auswertung)
dat_auswertung %>% mutate(Vertrauen = mean(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5))
dat_auswertung %>% mean(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)
parse_number(dat_auswertung)
library(dplyr)
spec(dat_auswertung)
dat_auswertung %>% mutate(Vertrauen = mean(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5))
mean(dat_auswertung$KIT_1, dat_auswertung$KIT_2, dat_auswertung$KIT_3, dat_auswertung$KIT_4, dat_auswertung$KIT_5)
rowMeans(dat_auswertung$KIT_1, dat_auswertung$KIT_2, dat_auswertung$KIT_3, dat_auswertung$KIT_4, dat_auswertung$KIT_5)
dat_auswertung %>% mutate(Vertrauen = rowMeans(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5))
dat_auswertung %>% mutate(Vertrauen = rowMeans(select(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)))
dat_auswertung %>% mutate(Vertrauen = rowMeans(select(as.numeric(KIT_1), as.numeric(KIT_2), as.numeric(KIT_3), as.numeric(KIT_4), as.numeric(KIT_5))))
rlang::last_error()
sapply(dat_auswertung, mode)
sapply(dat_auswertung, class)
dat_auswertung %>% mutate(Vertrauen = rowMeans(select(.,KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)))
dat_auswerung <- dat_auswertung %>% mutate(Vertrauen = rowMeans(select(.,KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)))
view(dat_auswertung$Vertrauen)
dat_auswerung <- dat_auswertung %>% transmute(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5, Vertrauen = rowMeans(select(.,KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)))
view(dat_auswertung$Vertrauen)
dat_auswertung
rowMeans(dat_auswertung$KIT_1, dat_auswertung$KIT_2, dat_auswertung$KIT_3, dat_auswertung$KIT_4, dat_auswertung$KIT_5)
rowMeans(select(dat_auswertung$KIT_1, dat_auswertung$KIT_2, dat_auswertung$KIT_3, dat_auswertung$KIT_4, dat_auswertung$KIT_5))
rowMeans(select(.,dat_auswertung$KIT_1, dat_auswertung$KIT_2, dat_auswertung$KIT_3, dat_auswertung$KIT_4, dat_auswertung$KIT_5))
dat_auswertung <-
read_csv("/Users/tessalottermann/Documents/Thesis/Answers2.csv", na ="NULL")
spec(dat_auswertung)
mutate(dat_auswertung, Vertrauen = rowMeans(select(., KIT_1, KIT_2, KIT_3, KIT_4, KIT_5, na.rm = TRUE))
mutate(dat_auswertung, Vertrauen = rowMeans(select(., KIT_1, KIT_2, KIT_3, KIT_4, KIT_5), na.rm = TRUE))
dat_auswertung  %>% mutate(dat_auswertung, Vertrauen = rowMeans(select(., KIT_1, KIT_2, KIT_3, KIT_4, KIT_5), na.rm = TRUE))
library(purrr)
dat_auswertung %>% rowwise() %>% mutate (Vertrauen = mean(c(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)))
library(dplyr)
library(tidyverse)
library(e1071)
library(purrr)
dat_auswertung <-
read_csv("/Users/tessalottermann/Documents/Thesis/Answers2.csv", na ="NULL")
dat_auswertung %>% rowwise() %>% mutate (Vertrauen = mean(c(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)))
dat_auswertung <- dat_auswertung %>% rowwise() %>% mutate (Vertrauen = mean(c(KIT_1, KIT_2, KIT_3, KIT_4, KIT_5)))
dat_auswertung <- dat_auswertung %>% rowwise() %>% mutate (Misstrauen = mean(c(KIT_6, KIT_7, KIT_8, KIT_9, KIT_10, KIT_11)))
dat_auswertung <- dat_auswertung %>% rowwise() %>% mutate (Vertrauen = mean(c(KIT_6, KIT_7, KIT_8, KIT_9, KIT_10, KIT_11)))
dat_auswertung <- dat_auswertung %>% rowwise() %>% mutate (Likeability = mean(c(GQS_3_1, GQS_3_2, GQS_3_3, GQS_3_4, GQS_3_5)))
dat_auswertung <- dat_auswertung %>% rowwise() %>% mutate (Kompetenz = mean(c(GQS_4_1, GQS_4_2, GQS_4_3, GQS_4_4, GQS_4_5)))
dat_auswertung <- dat_auswertung %>% rowwise() %>% mutate (Sicherheit = mean(c(GQS_5_1, GQS_5_2, GQS_5_3)))
mean(dat_auswertung$UEQS_1)
mean(dat_auswertung$UEQS_2)
mean(dat_auswertung$UEQS_3)
mean(dat_auswertung$UEQS_4)
mean(dat_auswertung$UEQS_5)
mean(dat_auswertung$UEQS_6)
mean(dat_auswertung$UEQS_7)
mean(dat_auswertung$UEQS_8)
summary(dat_auswertung)
Abweichungen <- data.frame()
Abweichungen <- data.frame("Abweichungen")
View(Abweichungen)
Abweichungen <- data.frame(colnames("Abweichungen"))
Abweichungen <- data.frame(Abweichung = numeric())
View(Abweichungen)
for (i in dat_auswertung$TFPred1){
if (dat_auswertung$TFPred1 = 1) {
Abweichungen$Abweichung[,i] = 0
}
}
Abweichungen$Abweichung[i,] = 0
Abweichung = 0
dat_auswertung <- dat_auswertung %>% mutate(Abweichung = if (dat_auswertung$TFPred1 = 1) {
Abweichung = 0
})
dat_auswertung <- dat_auswertung %>% mutate(Abweichung = if (dat_auswertung$TFPred1 = 1){Abweichung = 0} else Abweichung = (Prediction1 - E7))
dat_auswertung <- dat_auswertung %>% mutate(Abweichung = if (dat_auswertung$TFPred1 == 1){Abweichung = 0} else Abweichung = (Prediction1 - E7))
dat_auswertung <- dat_auswertung %>% mutate(Abweichung = if (dat_auswertung$TFPred1 == 1){Abweichung = 0} else Abweichung = (dat_auswertung$Prediction1 - dat_auswertung$E7))
for (i in dat_auswertung$TFPred1){
if (dat_auswertung$TFPred1 == 1) {
Abweichungen$Abweichung[i,] = 0
}
}
Abweichungen <- data.frame(Abweichung = numeric(), nrow=11)
Abweichungen <- matrix(0, ncol = 1, nrow = 11)
for (i in dat_auswertung$TFPred1){
if (dat_auswertung$TFPred1 == 0) {
Abweichungen$Abweichung[i] = (dat_auswertung$Prediction1 - dat_auswertung$E7)
}
}
View(Abweichungen)
for (i in dat_auswertung$TFPred1){
if (dat_auswertung$TFPred1 == 0) {
Abweichungen[i] = (dat_auswertung$Prediction1 - dat_auswertung$E7)
}
}
Abweichungen[5]
Abweichungen[5] = 6
for (i in dat_auswertung$TFPred1){
if (dat_auswertung$TFPred1 == 0) {
Abweichungen[i] = (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
}
}
dat_auswertung$Prediction1[5] - dat_auswertung$E7[5]
for (i in dat_auswertung$TFPred1){
if (dat_auswertung$TFPred1[i] == 0) {
Abweichungen[i] = (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
}
}
for (i in dat_auswertung$TFPred1){
if (i == 0) {
Abweichungen[i] = (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
}
}
for (i in dat_auswertung$TFPred1){
if (i == 0) {
Abweichungen[i] <- (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
}
}
Abweichungen[5]<-[dat_auswertung$Prediction1[5] - dat_auswertung$E7[5]
Abweichungen[5]<-dat_auswertung$Prediction1[5] - dat_auswertung$E7[5]
for (i in dat_auswertung$TFPred1){
if (i == 0) {
Abweichungen[i] <- dat_auswertung$Prediction1[i] - dat_auswertung$E7[i]
}
}
for (i in dat_auswertung$TFPred1) {
i
}
print(i)
for (i in dat_auswertung$TFPred1) {
print(i)
}
for (i in dat_auswertung$TFPred1){
if (i == 0) {
abstand <- dat_auswertung$Prediction1[i] - dat_auswertung$E7[i]
Abweichungen[i] <- abstand
}
}
for (i in dat_auswertung$TFPred1){
if (i == 0) {
abstand <- dat_auswertung$Prediction1[i] - dat_auswertung$E7[i]
Abweichungen[i] <- abstand
print(i)
print(abstand)
}
}
for (i in dat_auswertung$TFPred1){
if (i == 0) {
abstand <- dat_auswertung$Prediction1[i] - dat_auswertung$E7[i]
Abweichungen[i] <- abstand
print(i)
print(abstand)
}
}
for (i in dat_auswertung$TFPred1) {
print(i)
}
dat_auswertung <- dat_auswertung %>% mutate(Abweichung = if (dat_auswertung$TFPred1 == 1){Abweichung = 0} else Abweichung = (dat_auswertung$Prediction1 - dat_auswertung$E7))
warnings()
for (i in dat_auswertung$TFPred1){
if (i == 0) {
abstand <- dat_auswertung$Prediction1[i] - dat_auswertung$E7[i]
print(abstand)
}
}
for (i in dat_auswertung$TFPred1){
if (i == 0) {
abstand <- (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
print(abstand)
}
}
for (i in dat_auswertung$TFPred1) {
print(i)
}
for (i in dat_auswertung$TFPred1){
if (i[1] == 0) {
abstand <- (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
print(abstand)
}
}
for (i in dat_auswertung$TFPred1){
# if (i[1] == 0) {
abstand <- (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
print(abstand)
#}
}
for (i in dat_auswertung$TFPred1){
if (i == 0) {
abstand <- (dat_auswertung$Prediction1[i] - dat_auswertung$E7[i])
print(abstand)
}
}
